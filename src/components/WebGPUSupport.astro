---
// WebGPU 支持检测组件

// 准备i18n文本传递给客户端脚本
const i18nTexts = {
  checking: Astro.locals.t('webgpu.support.checking'),
  notSupported: Astro.locals.t('webgpu.support.notSupported'),
  notSupportedDetails: Astro.locals.t('webgpu.support.notSupportedDetails'),
  supported: Astro.locals.t('webgpu.support.supported'),
  supportedDetails: Astro.locals.t('webgpu.support.supportedDetails'),
  noAdapter: Astro.locals.t('webgpu.support.noAdapter'),
  noAdapterDetails: Astro.locals.t('webgpu.support.noAdapterDetails'),
  error: Astro.locals.t('webgpu.support.error'),
  errorPrefix: Astro.locals.t('webgpu.support.errorPrefix'),
};
---

<div class="webgpu-support-check">
  <div id="webgpu-status" class="status-loading">
    <span class="icon">⏳</span>
    <span class="text" id="status-text">检测 WebGPU 支持中...</span>
  </div>
</div>

<style>
  .webgpu-support-check {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1rem 0;
    background: var(--sl-color-bg-nav);
  }

  .status-loading {
    color: var(--sl-color-text-accent);
  }

  .status-supported {
    color: var(--sl-color-green);
  }

  .status-not-supported {
    color: var(--sl-color-red);
  }

  .status-error {
    color: var(--sl-color-orange);
  }

  .icon {
    margin-right: 0.5rem;
    font-size: 1.2em;
  }

  .text {
    font-weight: 500;
  }

  .details {
    margin-top: 0.5rem;
    font-size: 0.9em;
    color: var(--sl-color-text-subtle);
  }
</style>

<script define:vars={{ i18nTexts }}>
  function checkWebGPUSupport() {
    const statusElement = document.getElementById('webgpu-status');
    const statusTextElement = document.getElementById('status-text');

    if (!statusElement) return;

    // 设置初始状态文本
    if (statusTextElement) {
      statusTextElement.textContent = i18nTexts.checking;
    }

    // 检查 navigator.gpu 是否存在
    if (!navigator.gpu) {
      statusElement.className = 'status-not-supported';
      statusElement.innerHTML = `
        <span class="icon">❌</span>
        <span class="text">${i18nTexts.notSupported}</span>
        <div class="details">${i18nTexts.notSupportedDetails}</div>
      `;
      return;
    }

    // 尝试请求适配器来进一步验证支持
    navigator.gpu.requestAdapter()
      .then(adapter => {
        if (adapter) {
          statusElement.className = 'status-supported';
          statusElement.innerHTML = `
            <span class="icon">✅</span>
            <span class="text">${i18nTexts.supported}</span>
            <div class="details">${i18nTexts.supportedDetails}</div>
          `;
        } else {
          statusElement.className = 'status-not-supported';
          statusElement.innerHTML = `
            <span class="icon">❌</span>
            <span class="text">${i18nTexts.noAdapter}</span>
            <div class="details">${i18nTexts.noAdapterDetails}</div>
          `;
        }
      })
      .catch(error => {
        statusElement.className = 'status-error';
        statusElement.innerHTML = `
          <span class="icon">⚠️</span>
          <span class="text">${i18nTexts.error}</span>
          <div class="details">${i18nTexts.errorPrefix}: ${error.message}</div>
        `;
      });
  }

  // 页面加载完成后执行检测
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', checkWebGPUSupport);
  } else {
    checkWebGPUSupport();
  }
</script>