---
export interface Props {
  id?: string;
  width?: number;
  height?: number;
  vertexShader: string;
  fragmentShader: string;
  title?: string;
}

const {
  id = "webgpu-canvas",
  width = 800,
  height = 600,
  vertexShader,
  fragmentShader,
  title = "WebGPU 演示",
} = Astro.props;
---

<div class="webgpu-demo">
  <h3>{title}</h3>
  <canvas id={id} width={width} height={height}></canvas>
  <div id={`${id}-error`} class="error-message" style="display: none;"></div>
</div>

<script define:vars={{ id, vertexShader, fragmentShader }}>
  async function initWebGPU() {
    try {
      // 检查 WebGPU 支持
      if (!navigator.gpu) {
        throw new Error(
          "WebGPU 不被当前浏览器支持。请使用支持 WebGPU 的现代浏览器。"
        );
      }

      // 获取 GPU 适配器
      const adapter = await navigator.gpu.requestAdapter();
      if (!adapter) {
        throw new Error("无法获取 WebGPU 适配器。");
      }

      // 获取 GPU 设备
      const device = await adapter.requestDevice();

      // 获取 canvas 和上下文
      const canvas = document.getElementById(id);
      if (!canvas) {
        throw new Error(`找不到 canvas 元素: ${id}`);
      }

      const context = canvas.getContext("webgpu");
      if (!context) {
        throw new Error("无法获取 WebGPU 上下文。");
      }

      // 配置 canvas 上下文
      const canvasFormat = navigator.gpu.getPreferredCanvasFormat();
      context.configure({
        device: device,
        format: canvasFormat,
      });

      // 创建着色器模块
      const vertexShaderModule = device.createShaderModule({
        label: "顶点着色器",
        code: vertexShader,
      });

      const fragmentShaderModule = device.createShaderModule({
        label: "片段着色器",
        code: fragmentShader,
      });

      // 创建渲染管道
      const renderPipeline = device.createRenderPipeline({
        label: "渲染管道",
        layout: "auto",
        vertex: {
          module: vertexShaderModule,
          entryPoint: "vs_main",
        },
        fragment: {
          module: fragmentShaderModule,
          entryPoint: "fs_main",
          targets: [
            {
              format: canvasFormat,
            },
          ],
        },
        primitive: {
          topology: "triangle-list",
        },
      });

      // 渲染函数
      function render() {
        // 获取当前纹理视图
        const textureView = context.getCurrentTexture().createView();

        // 创建渲染通道编码器
        const renderPassDescriptor = {
          label: "渲染通道",
          colorAttachments: [
            {
              view: textureView,
              clearValue: { r: 0.3, g: 0.3, b: 0.3, a: 1.0 },
              loadOp: "clear",
              storeOp: "store",
            },
          ],
        };

        // 创建命令编码器
        const encoder = device.createCommandEncoder({
          label: "命令编码器",
        });

        // 开始渲染通道
        const pass = encoder.beginRenderPass(renderPassDescriptor);
        pass.setPipeline(renderPipeline);
        pass.draw(3); // 绘制 3 个顶点
        pass.end();

        // 提交命令
        const commandBuffer = encoder.finish();
        device.queue.submit([commandBuffer]);
      }

      // 执行渲染
      render();
    } catch (error) {
      console.error("WebGPU 初始化失败:", error);
      const errorElement = document.getElementById(`${id}-error`);
      if (errorElement) {
        errorElement.style.display = "block";
        errorElement.innerHTML = `<strong>错误:</strong> ${error.message}`;
      }
    }
  }

  // 页面加载完成后初始化
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initWebGPU);
  } else {
    initWebGPU();
  }
</script>

<style>
  .webgpu-demo {
    margin: 2rem 0;
    padding: 1rem;
    border: 1px solid var(--sl-color-border);
    border-radius: 8px;
    background: var(--sl-color-bg-nav);
  }

  .webgpu-demo h3 {
    margin: 0 0 1rem 0;
    color: var(--sl-color-text);
    font-size: 1.2rem;
  }

  canvas {
    display: block;
    border: 1px solid var(--sl-color-border);
    border-radius: 4px;
    background: #2a2a2a;
    max-width: 100%;
    height: auto;
  }

  .error-message {
    margin-top: 1rem;
    padding: 1rem;
    background: var(--sl-color-bg-inline-code);
    border: 1px solid var(--sl-color-hairline-light);
    border-radius: 4px;
    color: var(--sl-color-white);
    font-size: 0.9rem;
    border-left: 4px solid #dc2626;
  }

  .error-message strong {
    color: #fca5a5;
  }
</style>
