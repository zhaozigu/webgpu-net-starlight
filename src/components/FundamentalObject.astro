---
export interface Props {
  id?: string;
  width?: number;
  height?: number;
  title?: string;
}

const {
  id = "webgpu-canvas",
  width = 800,
  height = 600,
  title = Astro.locals.t('webgpu.fundamentalObject.title'),
} = Astro.props;

// 准备i18n文本传递给客户端脚本
const i18nTexts = {
  initTitle: Astro.locals.t('webgpu.fundamentalObject.initTitle'),
  webgpuSupported: Astro.locals.t('webgpu.fundamentalObject.webgpuSupported'),
  adapterObtained: Astro.locals.t('webgpu.fundamentalObject.adapterObtained'),
  deviceObtained: Astro.locals.t('webgpu.fundamentalObject.deviceObtained'),
  contextObtained: Astro.locals.t('webgpu.fundamentalObject.contextObtained'),
  configComplete: Astro.locals.t('webgpu.fundamentalObject.configComplete'),
  errors: {
    notSupported: Astro.locals.t('webgpu.fundamentalObject.errors.notSupported'),
    noAdapter: Astro.locals.t('webgpu.fundamentalObject.errors.noAdapter'),
    canvasNotFound: Astro.locals.t('webgpu.fundamentalObject.errors.canvasNotFound'),
    noContext: Astro.locals.t('webgpu.fundamentalObject.errors.noContext'),
    initFailed: Astro.locals.t('webgpu.fundamentalObject.errors.initFailed'),
    errorPrefix: Astro.locals.t('webgpu.fundamentalObject.errors.errorPrefix'),
  }
};
---

<div class="webgpu-demo">
  <h3>{title}</h3>
  <canvas id={id} width={width} height={height}></canvas>
  <div id={`${id}-status`} class="status-info"></div>
  <div id={`${id}-error`} class="error-message" style="display: none;"></div>
</div>

<script define:vars={{ id, i18nTexts }}>
  async function initWebGPU() {
    let msgs = [`<strong>${i18nTexts.initTitle}</strong>`];

    try {
      // 检查 WebGPU 支持
      if (!navigator.gpu) {
        throw new Error(i18nTexts.errors.notSupported);
      } else {
        msgs.push(`✓ ${i18nTexts.webgpuSupported}`);
      }

      // 获取 GPU 适配器
      const adapter = await navigator.gpu.requestAdapter();
      if (!adapter) {
        throw new Error(i18nTexts.errors.noAdapter);
      } else {
        msgs.push(`✓ ${i18nTexts.adapterObtained}`);
      }

      // 获取 GPU 设备
      const device = await adapter.requestDevice();
      msgs.push(`✓ ${i18nTexts.deviceObtained}`);

      // 获取 canvas 和上下文
      const canvas = document.getElementById(id);
      if (!canvas) {
        throw new Error(`${i18nTexts.errors.canvasNotFound}: ${id}`);
      }

      const context = canvas.getContext("webgpu");
      if (!context) {
        throw new Error(i18nTexts.errors.noContext);
      } else {
        msgs.push(`✓ ${i18nTexts.contextObtained}`);
      }

      // 配置 canvas 上下文
      const canvasFormat = navigator.gpu.getPreferredCanvasFormat();
      context.configure({
        device: device,
        format: canvasFormat,
      });
      msgs.push(`✓ ${i18nTexts.configComplete}: ${canvasFormat}`);

      // 显示状态信息
      displayStatusMessages(msgs);
    } catch (error) {
      console.error(`${i18nTexts.errors.initFailed}:`, error);
      const errorElement = document.getElementById(`${id}-error`);
      if (errorElement) {
        errorElement.style.display = "block";
        errorElement.innerHTML = `<strong>${i18nTexts.errors.errorPrefix}:</strong> ${error.message}`;
      }

      // 显示错误状态信息
      msgs.push(`✗ ${i18nTexts.errors.errorPrefix}: ${error.message}`);
      displayStatusMessages(msgs);
    }
  }

  function displayStatusMessages(messages) {
    const statusElement = document.getElementById(`${id}-status`);
    if (!statusElement) return;

    const statusHtml = messages
      .map((message) => `<div class="status-item">${message}</div>`)
      .join("");
    statusElement.innerHTML = statusHtml;
  }

  // 页面加载完成后初始化
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initWebGPU);
  } else {
    initWebGPU();
  }
</script>

<style>
  .webgpu-demo {
    margin: 2rem 0;
    padding: 1rem;
    border: 1px solid var(--sl-color-border);
    border-radius: 8px;
    background: var(--sl-color-bg-nav);
  }

  .webgpu-demo h3 {
    margin: 0 0 1rem 0;
    color: var(--sl-color-text);
    font-size: 1.2rem;
  }

  canvas {
    display: block;
    border: 1px solid var(--sl-color-border);
    border-radius: 4px;
    background: #2a2a2a;
    max-width: 100%;
    height: auto;
  }

  .error-message {
    margin-top: 1rem;
    padding: 1rem;
    background: var(--sl-color-bg-inline-code);
    border: 1px solid var(--sl-color-hairline-light);
    border-radius: 4px;
    color: var(--sl-color-white);
    font-size: 0.9rem;
    border-left: 4px solid #dc2626;
  }

  .error-message strong {
    color: #fca5a5;
  }

  .status-info {
    margin-top: 1rem;
    padding: 1rem;
    background: var(--sl-color-bg-inline-code);
    border: 1px solid var(--sl-color-hairline-light);
    border-radius: 4px;
    color: var(--sl-color-text);
    font-size: 0.9rem;
    font-family: monospace;
  }

  .status-item {
    padding: 0.2rem 0;
    color: var(--sl-color-text-accent);
  }

  .status-item:first-child {
    font-weight: bold;
    color: var(--sl-color-white);
    margin-bottom: 0.5rem;
  }
</style>
